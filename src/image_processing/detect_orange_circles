#! /usr/bin/env python

import cv2 as cv
import numpy as np

import matplotlib.pyplot as plt
from matplotlib import colors

from mpl_toolkits.mplot3d import Axes3D  # noqa
from matplotlib.colors import hsv_to_rgb



img = cv.imread("test_orange.png") #orange_circles.png


original_img = img.copy()
# OpenCV by default opens images in BGR color space
img = cv.cvtColor(img, cv.COLOR_BGR2RGB)
img = cv.medianBlur(img,3)
#cv.imshow("img",img)

hsv_img = cv.cvtColor(img, cv.COLOR_RGB2HSV)
#cv.imshow("hsv_img",hsv_img)


#Range
light_orange = (20, 100, 100)
dark_orange = (30, 255, 255)
mask = cv.inRange(hsv_img, light_orange, dark_orange)
result = cv.bitwise_and(hsv_img, img, mask=mask)
#cv.imshow("mask",mask)

light_white = (30, 255, 255)
dark_white = (40, 255, 255)
mask_white = cv.inRange(hsv_img, light_white, dark_white)
result_white = cv.bitwise_and(img, img, mask=mask_white)

################## SHOW RANGE #####################
# lo_square = np.full((10, 10, 3), light_orange, dtype=np.uint8) / 255.0
# do_square = np.full((10, 10, 3), dark_orange, dtype=np.uint8) / 255.0
#
# plt.subplot(1, 2, 1)
# plt.imshow(hsv_to_rgb(do_square))
# plt.subplot(1, 2, 2)
# plt.imshow(hsv_to_rgb(lo_square))
# plt.show()


################## SHOW RANGE WHITE #############################
# lw_square = np.full((10, 10, 3), light_white, dtype=np.uint8) / 255.0
# dw_square = np.full((10, 10, 3), dark_white, dtype=np.uint8) / 255.0

# plt.subplot(1, 2, 1)
# plt.imshow(hsv_to_rgb(lw_square))
# plt.subplot(1, 2, 2)
# plt.imshow(hsv_to_rgb(dw_square))
# plt.show()

###################################################

final_mask = mask #+ mask_white
final_result = cv.bitwise_or(img, img, mask=final_mask)

# plt.subplot(1, 2, 1)
# plt.imshow(final_mask, cmap="gray")
# plt.subplot(1, 2, 2)
# plt.imshow(final_result)
# plt.show()
result = cv.medianBlur(final_result,5)
grey = cv.cvtColor(final_result,cv.COLOR_BGR2GRAY)
grey = cv.medianBlur(grey,9)
#
#cv.imshow("grey",grey)
# cv.imshow("final", result)
try:
    circles = cv.HoughCircles(grey, cv.HOUGH_GRADIENT, .9, 700,
                          param1=50, param2=30, minRadius=0, maxRadius=0)
    detected_circles = np.uint16(np.around(circles))
    circle_coords = []


    for (x,y,r) in detected_circles[0,:]:
        cv.circle(original_img, (x,y), r, (0,255,0),3)
        circle_coords.append([x,y])
        print(circle_coords)
        cv.imshow('original_img', original_img)
except:
    print("Cannot find circle")

# plt.subplot(1,2,1)
# plt.imshow(yellow_mask, cmap="grey")
# plt.subplot(1,2,2)
# plt.imshow(yellow_result)
# plt.show()
cv.waitKey(0)
cv.destroyAllWindows()
