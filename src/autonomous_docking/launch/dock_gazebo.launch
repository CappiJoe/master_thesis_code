<?xml version="1.0" encoding="UTF-8"?>
<launch>
  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="extra_gazebo_args" default=""/>
  <arg name="gui" default="true"/>
  <arg name="recording" default="false"/>
  <!-- Note that 'headless' is currently non-functional.  See gazebo_ros_pkgs issue #491 (-r arg does not disable
       rendering, but instead enables recording). The arg definition has been left here to prevent breaking downstream
       launch files, but it does nothing. -->
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="physics" default="ode"/>
  <arg name="verbose" default="false"/>
  <arg name="world_name" default="worlds/empty.world"/> <!-- Note: the world_name is with respect to GAZEBO_RESOURCE_PATH environmental variable -->
  <arg name="respawn_gazebo" default="false"/>
  <arg name="use_clock_frequency" default="false"/>
  <arg name="pub_clock_frequency" default="100"/>
  <arg name="enable_ros_network" default="true" />

  <!-- set use_sim_time flag -->
 <param name="/use_sim_time" value="true"/> <!--$(arg use_sim_time) instead of true-->

  <!-- set command arguments -->
  <arg unless="$(arg paused)" name="command_arg1" value=""/>
  <arg     if="$(arg paused)" name="command_arg1" value="-u"/>
  <arg unless="$(arg recording)" name="command_arg2" value=""/>
  <arg     if="$(arg recording)" name="command_arg2" value="-r"/>
  <arg unless="$(arg verbose)" name="command_arg3" value=""/>
  <arg     if="$(arg verbose)" name="command_arg3" value="--verbose"/>
  <arg unless="$(arg debug)" name="script_type" value="gzserver"/>
  <arg     if="$(arg debug)" name="script_type" value="debug"/>

  <!-- start gazebo server-->
  <group if="$(arg use_clock_frequency)">
    <param name="gazebo/pub_clock_frequency" value="$(arg pub_clock_frequency)" />
  </group>
  <group>
    <param name="gazebo/enable_ros_network" value="$(arg enable_ros_network)" />
  </group>
  <node name="gazebo" pkg="gazebo_ros" type="$(arg script_type)" respawn="$(arg respawn_gazebo)" output="screen"
	args="$(arg command_arg1) $(arg command_arg2) $(arg command_arg3) -e $(arg physics) $(arg extra_gazebo_args) $(arg world_name)" />

  <!-- start gazebo client -->
  <group if="$(arg gui)">
    <node name="gazebo_gui" pkg="gazebo_ros" type="gzclient" respawn="false" output="screen" args="$(arg command_arg3)"/>
  </group>

  <group>
      <!-- Spawn Thorvald-->
      <include file="$(find laser_thorvald)/launch/robot_019_sim.launch"/>
      <!-- <include file="$(find laser_thorvald)/launch/thorvald_4wd2ws.launch"/> -->
      <!-- vthorvald_4wd2ws.launch"/> -->
  </group>
  <group>
      <node name="thorvald_ii_model" pkg="gazebo_ros" type="spawn_model" output="screen"
      args ="-urdf -param robot_description -model thorvald_ii"/>
  </group>

  <group>
      <!-- Initiate Laser Merger-->
      <include file="$(find laser_thorvald)/launch/corner_hokuyos_laser_merger.launch"/>
  </group>

  <group>
      <!-- Spawn Charging Station, tunnel and warehouse-->
      <!-- <include file="$(find charging_station_gazebo)/launch/spawn_charging_station.launch"/>
      <include file="$(find tunnel_gazebo)/launch/spawn_tunnel.launch"/>
      <include file="$(find field_house)/launch/spawn_field_house.launch"/>
      <include file="$(find grey_wall_charging)/launch/spawn_boundary_walls.launch"/> -->
      <include file="$(find autonomous_docking)/launch/spawn_dock.launch"/>
      <!-- <arg name="enable_odom_tf" default="True" />
      <arg name="odom_frame_id" value="$odom" />
      </include> -->
  </group>
  <group>
      <!-- Include Teleoperation, Keyboard for Thorvald-->
      <!-- <include file="$(find teleop_keyboard_thorvald)/teleop_thorvald.launch"/> -->
  </group>
</launch>
