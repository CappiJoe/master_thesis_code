#! /usr/bin/env python

import rospy, actionlib, tf
from geometry_msgs.msg import Twist, Pose, PoseStamped, PoseArray
from sensor_msgs.msg import LaserScan
from apriltag_ros.msg import AprilTagDetection, AprilTagDetectionArray
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
from std_msgs.msg import Float32
import numpy as np
import math
import angles

class detect_charger(object):
    def __init__(self):
        rospy.Subscriber("/tag_detections", AprilTagDetectionArray, self.apriltag_callback, queue_size=1)
        self.charger_pose_publisher = rospy.Publisher("/apriltag_charger_pose", PoseArray, queue_size=1)
        self.station_pose_publisher = rospy.Publisher("/apriltag_station_pose", PoseArray, queue_size=1)
        self.distance_publisher = rospy.Publisher("/apriltag0_range", Float32, queue_size=1)
        self.lt = tf.TransformListener()

    def apriltag_callback(self, tag_info):
        tag_rate = rospy.Rate(0.5)
        self.tag0_is_detected = False
        self.tag1_is_detected = False
        self.tag2_is_detected = False
        self.tag3_is_detected = False
        self.tag4_is_detected = False
        for tag_detected in tag_info.detections:
            if np.round(tag_detected.id) == 0:
                tag_0 = tag_detected
                self.tag0_is_detected = True
                rospy.loginfo("TAG 0 DETECTED")
            elif np.round(tag_detected.id) == 1:
                tag_1 = tag_detected
                self.tag1_is_detected = True
            elif np.round(tag_detected.id) == 2:
                tag_2 = tag_detected
                self.tag2_is_detected = True
            elif np.round(tag_detected.id) == 3:
                tag_3 = tag_detected
                self.tag3_is_detected = True
            elif np.round(tag_detected.id) == 4:
                tag_4 = tag_detected
                self.tag4_is_detected = True

        if len(tag_info.detections) >= 2:

            if self.tag1_is_detected and self.tag2_is_detected:
                charger_pose_array = PoseArray()
                rospy.loginfo("Charger detected!")
                """ THE CHARGER WILL BE ASSIGNED TAG WITH ID 1 AND ID 2,
                WHERE 1 WILL REPRESENT THE LEFT SIDE OF THE DOCK """
                position_tag1 = np.array([tag_1.pose.pose.pose.position.z,tag_1.pose.pose.pose.position.x])
                position_tag2 = np.array([tag_2.pose.pose.pose.position.z,tag_2.pose.pose.pose.position.x])
                distance_tag1 = np.sqrt(tag_1.pose.pose.pose.position.z**2+tag_1.pose.pose.pose.position.x**2)
                distance_tag2 = np.sqrt(tag_2.pose.pose.pose.position.z**2+tag_2.pose.pose.pose.position.x**2)
                #Calculate angles
                angle_tag1 = math.atan2(tag_1.pose.pose.pose.position.x,tag_1.pose.pose.pose.position.z)
                angle_tag2 = math.atan2(tag_2.pose.pose.pose.position.x,tag_2.pose.pose.pose.position.z)
                tag1 = np.array([distance_tag1,angle_tag1])
                tag2 = np.array([distance_tag2,angle_tag2])
                charger_pose_calc, charger_initial_pose_calc = self.calculate_waypoints(tag1,tag2)
                # Determine charger_pose
                charger_pose = PoseStamped()
                charger_pose.pose.position.x = charger_pose_calc[0]
                charger_pose.pose.position.y = charger_pose_calc[1]
                charger_pose_quat = tf.transformations.quaternion_from_euler(0,0,charger_pose_calc[2])
                charger_pose.pose.orientation.x = charger_pose_quat[0]
                charger_pose.pose.orientation.y = charger_pose_quat[1]
                charger_pose.pose.orientation.z = charger_pose_quat[2]
                charger_pose.pose.orientation.w  = charger_pose_quat[3]
                charger_pose.header.frame_id = "camera"

                # transf = self.lt.lookupTransform("camera","map",rospy.Time(0))
                # charger_pose = self.lt.transformPose("map",charger_pose)
                """ CALCULATE INITIAL POSE TO OBTAIN BEFORE DOCKING """
                charger_initial_pose = PoseStamped()
                charger_initial_pose.pose.position.x = charger_initial_pose_calc[0]
                charger_initial_pose.pose.position.y = charger_initial_pose_calc[1]
                charger_initial_pose.pose.orientation.x = charger_pose_quat[0]
                charger_initial_pose.pose.orientation.y = charger_pose_quat[1]
                charger_initial_pose.pose.orientation.z = charger_pose_quat[2]
                charger_initial_pose.pose.orientation.w  = charger_pose_quat[3]
                charger_initial_pose.header.frame_id = "camera"

                # station_gate_pose = self.lt.transformPose("map",station_gate_pose)
                charger_pose_array.poses = [charger_pose.pose, charger_initial_pose.pose]
                self.charger_pose_publisher.publish(charger_pose_array)

                """ ......................................................"""

                """ Broadcasting the charger frame from the camera frame """
                br = tf.TransformBroadcaster()
                br2 = tf.TransformBroadcaster()

                # br.sendTransform((charger_pose.pose.position.y, 0, charger_pose.pose.position.x),
                #                  (ccharger_pose.pose.orientation.x,charger_pose.pose.orientation.y,charger_pose.pose.orientation.z,charger_pose.pose.orientation.w),
                #                  rospy.Time.now(),
                #                  'charger',
                #                  'camera')
                br.sendTransform((charger_pose.pose.position.x, charger_pose.pose.position.y, 0),
                                 (charger_pose.pose.orientation.x,charger_pose.pose.orientation.y,charger_pose.pose.orientation.z,charger_pose.pose.orientation.w),
                                 rospy.Time.now(),
                                 'charger',
                                 'base_link')
                br2.sendTransform((charger_initial_pose.pose.position.x, charger_initial_pose.pose.position.y, 0),
                                 (charger_initial_pose.pose.orientation.x,charger_initial_pose.pose.orientation.y,charger_initial_pose.pose.orientation.z,charger_initial_pose.pose.orientation.w),
                                 rospy.Time.now(),
                                 'charger_ref',
                                 'base_link')

            if self.tag3_is_detected and self.tag4_is_detected:
                station_gate_pose_array = PoseArray()
                """ THE STATION GATE WILL BE ASSIGNED TAG WITH ID 3 AND ID 4,
                WHERE 3 WILL REPRESENT THE LEFT SIDE OF THE DOCK """
                rospy.loginfo("Station gate detected!")
                position_tag3 = np.array([tag_3.pose.pose.pose.position.z,tag_3.pose.pose.pose.position.x])
                position_tag4 = np.array([tag_4.pose.pose.pose.position.z,tag_4.pose.pose.pose.position.x])
                distance_tag3 = np.sqrt(tag_3.pose.pose.pose.position.z**2+tag_3.pose.pose.pose.position.x**2)
                distance_tag4 = np.sqrt(tag_4.pose.pose.pose.position.z**2+tag_4.pose.pose.pose.position.x**2)
                #Calculate angles
                angle_tag3 = math.atan2(tag_3.pose.pose.pose.position.x,tag_3.pose.pose.pose.position.z)
                angle_tag4 = math.atan2(tag_4.pose.pose.pose.position.x,tag_4.pose.pose.pose.position.z)
                tag3 = np.array([distance_tag3,angle_tag3])
                tag4 = np.array([distance_tag4,angle_tag4])
                station_gate_pose_calc, station_initial_pose_calc = self.calculate_waypoints(tag3,tag4)
                # Determine pose of the gate at its midpoint
                station_gate_pose = PoseStamped()
                station_gate_pose.pose.position.x = station_gate_pose_calc[0]
                station_gate_pose.pose.position.y = station_gate_pose_calc[1]
                station_pose_quat = tf.transformations.quaternion_from_euler(0,0,station_gate_pose_calc[2])
                station_gate_pose.pose.orientation.x = station_pose_quat[0]
                station_gate_pose.pose.orientation.y = station_pose_quat[1]
                station_gate_pose.pose.orientation.z = station_pose_quat[2]
                station_gate_pose.pose.orientation.w  = station_pose_quat[3]
                station_gate_pose.header.frame_id = "camera"

                """ CALCULATE INITIAL POSE TO OBTAIN BEFORE ENTERING STATION """
                station_initial_pose = PoseStamped()
                station_initial_pose.pose.position.x = station_initial_pose_calc[0]
                station_initial_pose.pose.position.y = station_initial_pose_calc[1]
                station_initial_pose.pose.orientation.x = station_pose_quat[0]
                station_initial_pose.pose.orientation.y = station_pose_quat[1]
                station_initial_pose.pose.orientation.z = station_pose_quat[2]
                station_initial_pose.pose.orientation.w  = station_pose_quat[3]
                station_initial_pose.header.frame_id = "camera"
                # station_gate_pose = self.lt.transformPose("map",station_gate_pose)
                station_gate_pose_array.poses = [station_gate_pose.pose, station_initial_pose.pose]
                self.station_pose_publisher.publish(station_gate_pose_array)

        else:
            rospy.loginfo("A pair of apriltags has not been detected yet....")

        if self.tag0_is_detected:
            """ TAG 0 WILL BE USED FOR RANGING WHEN LASER IS NOT PRESENT """
            position_tag0 = np.array([tag_0.pose.pose.pose.position.z,tag_0.pose.pose.pose.position.x])
            distance_to_tag0 = np.sqrt(position_tag0[0]**2+position_tag0[1]**2)
            self.distance_publisher.publish(distance_to_tag0)
            rospy.loginfo(distance_to_tag0)
        else:
            rospy.loginfo("Unable to find tag 0 for ranging")

        tag_rate.sleep()

    def calculate_waypoints(self,p_a,p_b):
        '''
        Caluclating a point a given distance (3m) in front of the charging station
        as an inital pose before the fine operation of the docking takes place.
        '''
        pose_time = rospy.Rate(10)

        """ Define p1 as the point with the smallest angle. """
        if p_a[1] < p_b[1]:
            p1 = p_a
            p2 = p_b
        else:
            p1 = p_b
            p2 = p_a

        p1_vec = np.array([p1[0]*math.cos(p1[1]),p1[0]*math.sin(p1[1])])
        p2_vec = np.array([p2[0]*math.cos(p2[1]),p2[0]*math.sin(p2[1])])
        a = p2_vec
        angle_between_p1_p2 = p2[1]-p1[1]
        baseline = p1_vec-p2_vec
        p2_to_goal_vec = baseline/2
        c = p2_to_goal_vec
        distance_to_goal_from_waypoint = 3 # Change if desired
        goal_vector = a+c


        if abs(c[0]) < 10e-4:
            waypoint_vec = goal_vector - [self.distance_to_goal_from_waypoint,0]
            psi_goal = 0
        else:
            dy = math.sqrt((c[0]**2*distance_to_goal_from_waypoint**2)/(c[1]**2+c[0]**2))
            if (-c[1]/c[0])*dy*a[0]+dy*a[1] >= 0:
                dy = -dy
            dx = -(c[1]/c[0])*dy
            d = np.array([dx,dy])
            waypoint_vec = a + c + d
            psi_goal = math.atan2(-d[1],-d[0])
        waypoint_pose = np.array([waypoint_vec[0], waypoint_vec[1], psi_goal])
        goal_pose = np.array([goal_vector[0], goal_vector[1], psi_goal])

        """ Return the pose of the charger and the calculated waypoint """
        return goal_pose, waypoint_pose
        pose_time.sleep()

if __name__ == "__main__":
    rospy.init_node("tag_detections")
    detect_charger()
    rospy.spin()
