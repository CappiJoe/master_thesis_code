#! /usr/bin/env python

import roslib
import rospy
import numpy as np
import math
import angles
from geometry_msgs.msg import Twist, PoseWithCovarianceStamped, PoseArray, PoseStamped
from nav_msgs.msg import Odometry
from sensor_msgs.msg import LaserScan
from std_msgs.msg import Float32
from tf.transformations import euler_from_quaternion, quaternion_from_euler

class docking_controller(object):
    def __init__(self):#initial setup
        """ SET SIMULATION """
        sim = True
        """----------------"""

        """ SET AVAILABLE SENSORS"""
        self.only_camera_is_available = False
        self.only_laser_is_available = True
        self.both_sensors_are_available = False
        """----------------------"""

        """ Set distance to marker when successfully docked"""
        self.distance_to_range_marker_when_docked = 3
        """----------------------"""

        self.message_idle = "Docking action is IDLE."
        self.message_active = "Docking action is ACTIVE."

        if sim == True:
            state_publisher = "/odometry/base_raw"
            rospy.Subscriber(state_publisher, Odometry, self.state_callback, queue_size=1)
        else:
            state_publisher = "/robot_pose_ekf/odom_combined"
            rospy.Subscriber(state_publisher, PoseWithCovarianceStamped, self.state_callback, queue_size=1)

        rospy.Subscriber('/laser_waypoints', PoseArray, self.laser_pose_callback, queue_size=1)
        rospy.Subscriber('/apriltag_charger_pose', PoseArray, self.apriltag_charger_callback, queue_size=1)
        rospy.Subscriber('/apriltag0_range', Float32, self.apriltag_range_callback, queue_size=1)
        rospy.Subscriber('/scan',LaserScan, self.laser_rangefinder, queue_size=1)
        self.thorvald_x_coordinate = 0
        self.thorvald_y_coordinate = 0
        self.thorvald_heading = 0
        self.current_vel = 0
        self.ready_to_dock = False
        self.successfully_docked = False
        self.apriltag_goal_is_received = False
        self.apriltag_initial_pose_is_received = False
        self.laser_initial_pose_is_received = False
        self.laser_goal_is_received = False
        self.arrived_at_pose = False
        self.range_ahead_camera = 0
        self.range_ahead_laser = 0

    def laser_pose_callback(self, laser_charger_msg):
        waypoint_update_rate = rospy.Rate(10)
        laser_goal_pose = laser_charger_msg.poses[0].orientation
        (roll_goal, pitch_goal, yaw_goal) = euler_from_quaternion([laser_goal_pose.x, laser_goal_pose.y, laser_goal_pose.z,laser_goal_pose.w])
        self.laser_goal_is_received = True
        self.laser_goal = [laser_charger_msg.poses[0].position.x,laser_charger_msg.poses[0].position.y, yaw_goal]

        waypoint_pose_q = laser_charger_msg.poses[1].orientation
        (roll, pitch, yaw) = euler_from_quaternion([waypoint_pose_q.x, waypoint_pose_q.y, waypoint_pose_q.z,waypoint_pose_q.w])
        self.laser_initial_pose = [laser_charger_msg.poses[1].position.x,laser_charger_msg.poses[1].position.y, yaw]
        self.laser_initial_pose_is_received = True
        waypoint_update_rate.sleep()

    def apriltag_charger_callback(self, apriltag_charger_msg):
        apriltag_update_rate = rospy.Rate(10)
        goal_pose_q = apriltag_charger_msg.poses[0].orientation
        (roll_goal, pitch_goal, yaw_goal) = euler_from_quaternion([goal_pose_q.x, goal_pose_q.y, goal_pose_q.z,goal_pose_q.w])
        self.apriltag_goal_is_received = True
        self.apriltag_goal = [apriltag_charger_msg.poses[0].position.x, apriltag_charger_msg.poses[0].position.y, yaw_goal]

        initial_pose_q = apriltag_charger_msg.poses[1].orientation
        (roll_initial, pitch_initial, yaw_initial) = euler_from_quaternion([initial_pose_q.x, initial_pose_q.y, initial_pose_q.z,initial_pose_q.w])
        self.apriltag_initial_pose_is_received = True
        self.apriltag_initial_pose = [apriltag_charger_msg.poses[1].position.x, apriltag_charger_msg.poses[1].position.y, yaw_initial]
        apriltag_update_rate.sleep()

    def state_callback(self, state_message):#, path):
        state_rate = rospy.Rate(10.0)
        self.thorvald_x_coordinate = state_message.pose.pose.position.x
        self.thorvald_y_coordinate = state_message.pose.pose.position.y
        rot_q = state_message.pose.pose.orientation
        (roll, pitch, yaw) = euler_from_quaternion([rot_q.x, rot_q.y, rot_q.z,rot_q.w])
        self.thorvald_heading = angles.normalize_angle(yaw)
        self.controller_setup()
        state_rate.sleep()

    def controller_setup(self):
        control_pose = [None]
        use_linear = False
        if self.only_camera_is_available:
            self.range_ahead = self.range_ahead_camera
            if self.ready_to_dock:
                rospy.loginfo("Initializing final alignment..")
                use_linear = True
                control_pose = self.apriltag_goal
            else:
                if self.apriltag_initial_pose_is_received:
                    control_pose = self.apriltag_initial_pose
                    rospy.loginfo("Docking in progress...")
                else:
                    self.rotate_base()
                    rospy.loginfo("Looking for AprilTags...")

        elif self.only_laser_is_available:
            self.range_ahead = self.range_ahead_laser
            if self.ready_to_dock:
                control_pose = self.laser_goal
                rospy.loginfo("Could not detect apriltags. Using laser data to dock...")
                use_linear = True
            else:
                if self.laser_initial_pose_is_received:
                    control_pose = self.laser_initial_pose
                    rospy.loginfo("Docking in progress...")
                else:
                    rospy.loginfo("Waiting for waypoint...")

        elif self.both_sensors_are_available:
            self.range_ahead = self.range_ahead_laser
            if self.ready_to_dock:
                if self.apriltag_goal_is_received == True:
                    control_pose = self.apriltag_goal
                    rospy.loginfo("Trying to dock based on Apriltags")
                else:
                    control_pose = self.laser_goal
                    rospy.loginfo("Could not detect apriltags. Using laser data.")
                use_linear = True
            else:
                if self.laser_initial_pose_is_received:
                    control_pose = self.laser_initial_pose
                    rospy.loginfo("Docking in progress...")
                else:
                    rospy.loginfo("Waiting for waypoint...")

        if control_pose[0] is not None and use_linear == False:
            self.pose_controller(control_pose)
        elif use_linear == True:
            self.final_alignment_controller(control_pose)
            if self.successfully_docked:
                rospy.loginfo("Thorvald has successfully docked and is ready to charge...")
            else:
                rospy.loginfo("Executing final alignment...")

    def rotate_base(self):
        rotate_thorvald = rospy.Publisher("/nav_vel", Twist, queue_size=1)
        cmd_rot = Twist()
        cmd_rot.angular.z = 0.4
        rotate_thorvald.publish(cmd_rot)

    def laser_rangefinder(self, laser_msg):
        scan_ranges = laser_msg.ranges
        scan_angle_min = laser_msg.angle_min
        scan_angle_inc = laser_msg.angle_increment
        self.range_ahead_laser = scan_ranges[len(scan_ranges)/2]

    def apriltag_range_callback(self, apriltag_range_msg):
        self.range_ahead_camera = apriltag_range_msg.data
        rospy.loginfo(self.range_ahead_camera)

    def final_alignment_controller(self, docking_goal):
        thorvald_cmd = rospy.Publisher('/nav_vel', Twist, queue_size=1) # Publishing msg to the nav_vel topic. Twist as msg type.
        cmd = Twist()
        cmd_max_trans_vel = 0.2# maximum longitudinal velocity
        cmd_max_rot_vel = 0.2# maximum yaw rate

        """Stability: k_alpha>0, k_beta<0 and (k_alpha-k_rho)>0"""
        k_rho = 0.5 # control gain for longitudinal velocity
        k_alpha = 3.4 # control gain for heading error
        k_beta = -0.7# control gain for goal orientation

        dx = docking_goal[0]-self.thorvald_x_coordinate #Difference in x coordinates between Thorvald and docking_goal
        dy = docking_goal[1]-self.thorvald_y_coordinate #Difference in y coordinates between Thorvald and docking_goal

        distance_to_goal = self.range_ahead
        rospy.loginfo("Distance in front: %f" %distance_to_goal )
        angle_to_goal_from_base_link = angles.normalize_angle(math.atan2(dy,dx))
        heading_error = angles.normalize_angle(docking_goal[2]-self.thorvald_heading)
        rho = distance_to_goal
        alpha = heading_error
        beta = 0

        """ Linearized controller for small angles, non-linear for greater angles """
        cmd_velocity_x = k_rho*rho
        cmd_steering_rate = (k_alpha+k_rho)*alpha + (k_beta+k_rho)*beta
        cmd.linear.x = cmd_velocity_x
        cmd.angular.z = cmd_steering_rate

        if abs(cmd_velocity_x) > cmd_max_trans_vel :
            cmd.linear.x = cmd_max_trans_vel * (cmd_velocity_x/abs(cmd_velocity_x))
        elif abs(cmd_steering_rate) > cmd_max_rot_vel:
             cmd.angular.z = cmd_max_rot_vel * (cmd_steering_rate/abs(cmd_steering_rate))

        if distance_to_goal < self.distance_to_range_marker_when_docked:
            cmd.linear.x = 0
            cmd.angular.z = 0
            rospy.loginfo("In position!")
            self.successfully_docked = True

        thorvald_cmd.publish(cmd)

    def pose_controller(self, goal):
        thorvald_cmd = rospy.Publisher('/nav_vel', Twist, queue_size=1) # Publishing msg to the nav_vel topic. Twist as msg type.
        cmd = Twist()
        cmd_max_trans_vel = 0.4 # maximum longitudinal velocity
        cmd_max_rot_vel = 0.8 # maximum yaw rate

        """Stability: k_alpha>0, k_beta<0 and (k_alpha-k_rho)>0"""
        k_rho = 0.5 # control gain for longitudinal velocity
        k_alpha = 3.4 # control gain for heading error
        k_beta = -0.7# control gain for goal orientation

        dx = goal[0]-self.thorvald_x_coordinate #Difference in x coordinates between Thorvald and goal
        dy = goal[1]-self.thorvald_y_coordinate #Difference in y coordinates between Thorvald and goal

        distance_to_goal = math.sqrt(dx**2+dy**2)
        angle_to_goal_from_base_link = angles.normalize_angle(math.atan2(dy,dx))
        heading_error = angles.normalize_angle(angle_to_goal_from_base_link-self.thorvald_heading)
        rho = distance_to_goal
        alpha = heading_error
        beta = angles.normalize_angle(self.thorvald_heading+goal[2]) #Goal orientation wrt global x-axis

        """ Linearized controller for small angles, non-linear for greater angles """
        if abs(alpha) < math.pi/36: #Linear
            cmd_velocity_x = k_rho*rho
            cmd_steering_rate = (k_alpha+k_rho)*alpha + (k_beta+k_rho)*beta
        else:  #Non-linear
            cmd_velocity_x = k_rho*rho*math.cos(alpha)
            cmd_steering_rate = k_alpha*alpha + k_rho*((math.sin(alpha)*math.cos(alpha))/alpha)*(alpha + k_beta*beta)
        goal_orientation_degree = goal[2]*180/math.pi
        current_heading_degree = self.thorvald_heading*180/math.pi
        if distance_to_goal < 0.2 and int(current_heading_degree) in range(int(goal_orientation_degree)-5,int(goal_orientation_degree)+5):
            cmd_velocity_x = 0.0
            cmd_steering_rate = 0.0
            self.arrived_at_pose = True
            self.ready_to_dock = True

        if abs(cmd_velocity_x) > cmd_max_trans_vel :
            cmd.linear.x = cmd_max_trans_vel * (cmd_velocity_x/abs(cmd_velocity_x))
        else:
            cmd.linear.x = cmd_velocity_x

        if abs(cmd_steering_rate) > cmd_max_rot_vel:
             cmd.angular.z = cmd_max_rot_vel * (cmd_steering_rate/abs(cmd_steering_rate))
        else:
             cmd.angular.z = cmd_steering_rate
        thorvald_cmd.publish(cmd)

if __name__ == "__main__":
    rospy.init_node("docking_controller")
    docking_controller()
    rospy.spin()
