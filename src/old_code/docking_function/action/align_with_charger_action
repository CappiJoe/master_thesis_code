#! /usr/bin/env python

import rospy
import actionlib
import rospy
import numpy as np
import math
import tf
import angles

import actionlib
from docking_function.msg

from geometry_msgs.msg import Twist, Pose, Point
from nav_msgs.msg import Odometry
import matplotlib.pyplot as plt

class docking_action(object):
    #messages for publishing feedback and result
    _feedback = docking_function.msg.align_with_chargerFeedback()
    _result = docking_function.msg.align_with_chargerResult()
    def __init__(self, _action_name):
        self.__action_name = name
        self._as = actionlib.SimpleActionServer(self._action_name, docking_function.msg,align_with_chargerAction, execute_cb=self.execute_cb, auto_start=False)
        self._as.start()

    def execute_cb(self, goal):
        # helper variables
        rate = rospy.Rate(1)
        success = True

        #Current position (Thorvald_state)
        x = 3.1415
        y = 6.2830
        self._feedback.point.x = x
        self._feedback.point.y = y
        rospy.loginfo("%s: executing... current position: (%f, %f)" %(self.__action_name,x,y))

        #Check that preempt has not been requested
        if self._as.is_preempt_requested():
            rospy.loginfo("%s: preempted..." %self.__action_name)
            self._as.set_preempted()
            success = False
            # break
        rate.sleep()

        if success:
            self._result.success = True
            rospy.loginfo("%s: succeeded!"%self._action_name)
            self._as.set_succeeded(self._result)
if __name__ == "__main__":
    rospy.init_node("align_with_charger")
    server = align_with_charger(rospy.get_name)
    rospy.spin()
