#! /usr/bin/env python

import roslib

import rospy
import numpy as np
import math
import tf
import angles
from geometry_msgs.msg import Twist, Pose, Point
from nav_msgs.msg import Odometry
from tf.transformations import euler_from_quaternion, quaternion_from_euler

#Subscribing to relevant topics to obtain information about Thorvald's odometry
class base_link_data(object):
    def __init__(self):
        #self.pose_msg = rospy.Subscriber("/odometry/base_raw", Odometry, self.odom_callback, queue_size=1) # Raw base data
        self.pose_msg = rospy.Subscriber("/odometry/base_raw", Odometry, self.odom_callback, queue_size=1) # Kalman Filter
        #self.pose_msg = rospy.Subscriber("charger_path", *** , self.path_callback, queue_size=1) # Kalman Filter
        self.x_coor = 0
        self.y_coor = 0
        self.current_heading = 0
        self.current_vel = 0
        rospy.loginfo("x coordinate: %f" %self.x_coor)

    def odom_callback(self, odom_msg):#, path):
        rate = rospy.Rate(10.0)
        #Coordinates
        self.x_coor = odom_msg.pose.pose.position.x
        self.y_coor = odom_msg.pose.pose.position.y
        #Heading
        rot_q = odom_msg.pose.pose.orientation
        #self.current_heading = angles.normalize_angle(2*math.acos(odom_msg.pose.pose.orientation.w))
        (roll, pitch, yaw) = euler_from_quaternion([rot_q.x, rot_q.y, rot_q.z,rot_q.w])
        self.current_heading = angles.normalize_angle(yaw)
        #Velocity
        self.current_vel = odom_msg.twist.twist.linear.x
        rospy.loginfo("x coordinate: %f, y coordinate: %f, heading: %f, longitudinal velocity: %f" %(self.x_coor, self.y_coor, self.current_heading, self.current_vel))
        self.pose_controller()
        rate.sleep()
    def pose_controller(self):
        rate = rospy.Rate(10.0)
        #For controller:
        thorvald_vel = rospy.Publisher('/nav_vel', Twist, queue_size=1) # Publishing msg to the nav_vel topic. Twist as msg type.
        cmd = Twist()

        #### UPDATE!!!
        goal_pose = [0,7,math.pi/2] # TEST
        charger_sent = False
        if charger_sent == False:
            br = tf.TransformBroadcaster()
            br.sendTransform((goal_pose[0], goal_pose[1], 0),
                             tf.transformations.quaternion_from_euler(0, 0, goal_pose[2]),
                             rospy.Time.now(),
                             'charger',
                             'odom') #base_link
            charger_sent = True

        #Control Parameters
        x0 = self.x_coor #current x coordinate
        y0 = self.y_coor #current y coordinate
        current_heading = self.current_heading
        #current_heading =

        max_trans_vel = 0.4 # maximum longitudinal velocity
        max_rot_vel = 0.8 # maximum yaw rate
        ## Stability: k_alpha>0, k_beta<0 and (k_alpha-k_rho)>0
        k_rho = 0.5 # control gain for velocity
        k_alpha = 4 # control gain for heading error
        k_beta = -1.5# control gain for goal orientation

        dx = goal_pose[0]-x0
        dy = goal_pose[1]-y0
        distance_to_goal = math.sqrt(dx**2+dy**2)
        angle_to_waypoint = angles.normalize_angle(math.atan2(dy,dx))
        heading_error = angles.normalize_angle(angle_to_waypoint-self.current_heading)

        rho = distance_to_goal
        alpha = heading_error
        beta = angles.normalize_angle(alpha-self.current_heading+goal_pose[2])



        if alpha < -math.pi/2:
            alpha = -math.pi/2
        elif alpha > math.pi/2:
            alpha = math.pi/2

        #Control commands
        velocity_x = k_rho*rho
        steering_rate = k_alpha*alpha + k_beta*beta

        if abs(alpha) < math.pi/18:
            velocity_x = k_rho*rho
            steering_rate = k_alpha*alpha + k_beta*beta
        else: # Nonlinear control law for bigger angles.
            velocity_x = k_rho*rho*math.cos(alpha)
            steering_rate = k_alpha*alpha + k_rho*((math.sin(alpha)*math.cos(alpha))/alpha)*(alpha + k_beta*beta)

        goal_orientation_degree = goal_pose[2]*180/math.pi
        current_heading_degree = self.current_heading*180/math.pi
        print("goal: %f" %goal_orientation_degree)
        print("current: %f" %current_heading_degree)
        if  self.current_vel <0.08 and int(current_heading_degree) in range(int(goal_orientation_degree)-5,int(goal_orientation_degree)+5):
            if distance_to_goal < 0.3:
                velocity_x = 0
                steering_rate = 0
                rospy.loginfo("Docking successful!")


        if abs(velocity_x) > max_trans_vel :
            cmd.linear.x = max_trans_vel * (velocity_x/abs(velocity_x))
        else:
            cmd.linear.x = velocity_x

        if abs(steering_rate) > max_rot_vel:
             cmd.angular.z = max_rot_vel * (steering_rate/abs(steering_rate))
        else:
             cmd.angular.z = steering_rate
        thorvald_vel.publish(cmd)
        rate.sleep()



if __name__ =='__main__':
    rospy.init_node('odometry_listener')
    base_link_data()
    rospy.spin()
