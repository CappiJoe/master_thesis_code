#! /usr/bin/env python

import roslib
import rospy
import tf
import math as m
import numpy as np
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Pose
import matplotlib.pyplot as plt
# For point clustering
from sklearn.cluster import KMeans
import angles

class charger_location_laser(object):
        """
        This object represents the pose of the charger
        Parameters:
        charger_x: float, x-coordinate
        charger_y: float, y-coordinate
        charger_orientation: float, orientation angle
        """
        def __init__(self, charger_x=0, charger_y=0, charger_orientation=0):
            rospy.Subscriber("scan", LaserScan, self.laser_scan, queue_size=None)
            charger_loc = rospy.Publisher("charger_loc", Pose, queue_size=1)
            self.charger_x = charger_x
            self.charger_y = charger_y
            self.charger_orientation = charger_orientation

        def laser_scan(self, scan_msg):
            rate = rospy.Rate(1)
            max_range_laser = scan_msg.range_max
            min_range_laser = scan_msg.range_min
            #Data of interest from the scan:
            scan_ranges = scan_msg.ranges
            scan_angle_min = scan_msg.angle_min
            scan_angle_inc = scan_msg.angle_increment
            scan_intensities = np.zeros_like(scan_ranges) #scan_msg.intensities
            intensity_threshold = 15000 ###Change after testing
            #Thorvald's current position
            #base_link_pos = np.array([Thorvald_state.x0, Thorvald_state.y0])
            #Empty array for the points of interest

            ################################### FOR TEST ########################
            test_idx = [idx for idx,val in enumerate(scan_ranges) if val<51 and val>0]
            for k in test_idx:
                scan_intensities[k] = 15001
            ####################################################################

            #Find the points with increased intensity
            cluster_points_distances = np.array([])
            cluster_points_angles = np.array([])
            for idx, distance in enumerate(scan_ranges):
                point_intensity = scan_intensities[idx]
                if point_intensity > intensity_threshold:
                    point_angle = angles.normalize_angle(scan_angle_min + idx*scan_angle_inc) #Start angle + n.o. angle increment to current laser tag
                    print(point_angle)
                    cluster_points_distances = np.append(cluster_points_distances, distance)
                    cluster_points_angles = np.append(cluster_points_angles, point_angle)
            cluster_points = np.array([cluster_points_distances,cluster_points_angles])

            #Sort the into two clusters based on distance><mean
            close_cluster_distance = np.array([])
            close_cluster_angle = np.array([])
            far_cluster_distance = np.array([])
            far_cluster_angle = np.array([])
            for idx, val in enumerate(cluster_points[0]):
                if val < np.mean(cluster_points[0]):
                    close_cluster_distance = np.append(close_cluster_distance,cluster_points[0][idx])
                    close_cluster_angle = np.append(close_cluster_angle,cluster_points[1][idx])
                else:
                    far_cluster_distance = np.append(far_cluster_distance,cluster_points[0][idx])
                    far_cluster_angle = np.append(far_cluster_angle,cluster_points[1][idx])

            #Take the mean of the closest and furthest cluster to approximate the position of the pillar.
            closest_point = np.array([np.mean(close_cluster_distance),np.mean(close_cluster_angle)])
            furthest_point = np.array([np.mean(far_cluster_distance),np.mean(far_cluster_angle)])
            #
            closest_pillar_coor = np.array([closest_point[0]*m.cos(closest_point[1]),closest_point[0]*m.sin(closest_point[1])])
            furthest_pillar_coor = np.array([furthest_point[0]*m.cos(furthest_point[1]),furthest_point[0]*m.sin(furthest_point[1])])
            # print(closest_pillar_coor)
            # print(furthest_pillar_coor


            #Define the coordinates of the final docking point
            docking_coor = (closest_pillar_coor+furthest_pillar_coor)/2
            print(docking_coor)
            br = tf.TransformBroadcaster()
            rospy.loginfo("tf is broadcasted")
            closest_positive_angle = angles.normalize_angle_positive(closest_point[1])
            furthest_positive_angle = angles.normalize_angle_positive(furthest_point[1])
            print(closest_positive_angle,furthest_positive_angle)
            alpha = np.maximum(closest_positive_angle,furthest_positive_angle)-np.minimum(closest_positive_angle,furthest_positive_angle)
            print(alpha)
            a_2 = furthest_point[0]-closest_point[0]*m.cos(alpha)
            x = closest_point[1]*m.sin(alpha)
            theta = angles.normalize_angle(m.pi/2-m.atan2(x,a_2)) # HEADING NEEDS TO BE UPDATED
            rate = rospy.Rate(10)

            while not rospy.is_shutdown():
                br.sendTransform((docking_coor[0], docking_coor[1], 0),
                                 tf.transformations.quaternion_from_euler(0, 0, theta),
                                 rospy.Time.now(),
                                 'charger',
                                 'base_link') #base_link
            rate.sleep()

if __name__ == '__main__':
    rospy.init_node('fixed_charger_frame')
    charger_location_laser()
    rospy.spin()
