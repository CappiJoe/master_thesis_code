#! /usr/bin/env python

# PATH
# Create a path with waypoints. For every point, assign a coordinate system so
# that the heading is given in the next point in the path. The heading angle
# should be calculated from the angle between the point and the goal.


# Broadcaster for waypoints in path


    br = tf.TransformBroadcaster()
    theta = angles.normalize_angle(math.atan2(goaly-p[1],goalx-p[0])
    rate = rospy.Rate(10)
    while not rospy.is_shutdown():
        br.sendTransform((pointx, 10.0, 0),
                         tf.transformations.quaternion_from_euler(0, 0, theta),
                         rospy.Time.now(),
                         'waypoint',
                         'odom')
        rate.sleep()

# Listener for the controller.

    while not rospy.is_shutdown():
        try:
            (trans,rot) = listener.lookupTransform('/base_link','/charger',rospy.Time(0)) #Can also add the fixed frame as a third frame
            print(rot)
        except(tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException):
            continue

        #tf.transformations.quaternion_from_euler(0, 0, theta),
        # ang_error = math.atan2(trans[1],trans[0])
        # if abs(ang_error) >= 0.3:
        #     angular = 4*ang_error
        # else:
        #     angular = 0
        # print(ang_error)
        angular = -angles.normalize_angle(math.acos(rot[3]))
        print(angular)
        linear = 0.5*math.sqrt(trans[0]**2 + trans[1]**2)
        cmd = Twist()
        if abs(linear) > 0.4:
            cmd.linear.x = 0.4*linear/abs(linear)
        cmd.angular.z = angular
        thorvald_vel.publish(cmd)

        rate.sleep()
